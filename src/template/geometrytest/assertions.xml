<Assertions>
<Group id="Other">
  <name>Other tests</name>
  <version>0.1</version>
  <author>interactive instruments GmbH</author>
  <creationDate>2015-08-18T12:00:00.000+02:00</creationDate>
  <lastEditor>Clemens Portele</lastEditor>
  <lastUpdateDate>2015-08-18T12:00:00.000+02:00</lastUpdateDate>
</Group>
<Subgroup id="Other.Geometry">
  <name>Geometry tests</name>
</Subgroup>
<Assertion id="Other.Geometry.01" enabled="true" severity="error" mode="global">
<name>CRS</name>
<shortDescription>...</shortDescription>
<description>...</description>
<specReference>n/a</specReference>
<expression>
let $featuresWithErrors := $features[//@srsName[.!='http://www.opengis.net/def/crs/EPSG/0/28992']][position() le $limitErrors]
return
 (local:statistics-info($featuresWithErrors),
  for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $text := concat('CRS ',data(($feature//@srsName[.!='http://www.opengis.net/def/crs/EPSG/0/28992'])[1]),' is not http://www.opengis.net/def/crs/EPSG/0/28992.')
   return local:object-message($feature, $text))
</expression>
</Assertion>
<Assertion id="Other.Geometry.02" enabled="true" severity="error" mode="global">
<name>Valid GML geometry (2D) all at once</name>
<shortDescription>Test geometry on being valid GML geometry for 2D</shortDescription>
<description>Test geometry on being valid GML geometry for 2D, all tests at once</description>
<specReference>GML 3</specReference>
<expression>
let $featuresWithErrors := $features[local:checkgeometry(., '111') != 'VVV'][position() le $limitErrors]
return
 (local:statistics-info($featuresWithErrors),
  for $feature in $featuresWithErrors
   let $text := concat('invalid geometry test: ',local:checkgeometry($feature,'111'))
   return local:object-message($feature, $text))
</expression>
</Assertion>
<Assertion id="Other.Geometry.03" enabled="true" severity="error" mode="global">
<name>Valid GML geometry (2D) General Validation</name>
<shortDescription>Test geometry on being valid GML geometry for 2D - General Validation</shortDescription>
<description>Test geometry on being valid GML geometry for 2D - General Validation</description>
<specReference>GML 3</specReference>
<expression>
let $featuresWithErrors := $features[local:checkgeometry(., '1') != 'VSS'][position() le $limitErrors]
return
 (local:statistics-info($featuresWithErrors),
  for $feature in $featuresWithErrors
   let $text := concat('geometry is not valid: ',local:checkgeometry($feature,'1'))
   return local:object-message($feature, $text))
</expression>
</Assertion>
<Assertion id="Other.Geometry.04" enabled="true" severity="error" mode="global">
<name>Valid GML geometry (2D) Polygon Patch Connectivity</name>
<shortDescription>Test geometry on being valid GML geometry for 2D - Polygon Patch Connectivity</shortDescription>
<description>Test geometry on being valid GML geometry for 2D - Polygon Patch Connectivity</description>
<specReference>GML 3</specReference>
<expression>
let $featuresWithErrors := $features[local:checkgeometry(., '01') != 'SVS'][position() le $limitErrors]
return
 (local:statistics-info($featuresWithErrors),
  for $feature in $featuresWithErrors
   let $text := concat('geometry is not valid: ',local:checkgeometry($feature,'01'))
   return local:object-message($feature, $text))
</expression>
</Assertion>
<Assertion id="Other.Geometry.05" enabled="true" severity="error" mode="global">
<name>Valid GML geometry (2D) Repetition of Position in CurveSegments</name>
<shortDescription>Test geometry on being valid GML geometry for 2D - Repetition of Position in CurveSegments</shortDescription>
<description>Test geometry on being valid GML geometry for 2D - Repetition of Position in CurveSegments</description>
<specReference>GML 3</specReference>
<expression>
let $featuresWithErrors := $features[local:checkgeometry(., '001') != 'SSV'][position() le $limitErrors]
return
 (local:statistics-info($featuresWithErrors),
  for $feature in $featuresWithErrors
   let $text := concat('geometry is not valid: ',local:checkgeometry($feature,'001'))
   return local:object-message($feature, $text))
</expression>
</Assertion>
<!-- Codelist
<Subgroup id="Other.Codelist">
  <name>Codelist tests</name>
</Subgroup>
<Assertion id="Other.Codelist.01" enabled="true" severity="error" mode="global">
<name>bgt-type valid</name>
<shortDescription>...</shortDescription>
<description>...</description>
<specReference>n/a</specReference>
<expression>
let $codelists := doc(concat($projDir, file:dir-separator(), "imgeo.rdf"))
let $featuresWithErrors :=
 (for $feature in $features[imgeo:bgt-type]
  where count($codelists//skos:Concept[skos:inScheme/@rdf:resource=$feature/imgeo:bgt-type/@codeSpace and skos:prefLabel/text()=$feature/imgeo:bgt-type/text()])=0
  return $feature)[position() le $limitErrors]
return
 (local:statistics-info($featuresWithErrors),
  for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $text := concat('Value of bgt-type property is not included in the authoritative IMGeo code list. Code list ',data($feature/imgeo:bgt-type/@codeSpace),' and value ',data($feature/imgeo:bgt-type/text()),'.')
   return local:object-message($feature, $text))
</expression>
</Assertion>
-->
</Assertions>
