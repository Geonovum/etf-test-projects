<?xml version="1.0" encoding="UTF-8"?>
<etf:ExecutableTestSuite
  xmlns="http://www.interactive-instruments.de/etf/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:etf="http://www.interactive-instruments.de/etf/2.0"
  xmlns:ii="http://www.interactive-instruments.de"
  id="EIDec27f542-af22-11e7-d211-09173f13e4c5"
  xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 http://resources.etf-validator.net/schema/v2/service/service.xsd">
  <itemHash>bQ==</itemHash>
  <remoteResource>https://github.com/interactive-instruments/etf-ets-repository</remoteResource>
  <localPath>/auto</localPath>
  <label>GML 3.2 Simple Features profile</label>
  <description>GML 3.2 Simple Features profile</description>
  <reference>../example-bsxets.xq</reference>
  <version>2.1.0</version>
  <author>Geonovum</author>
  <creationDate>2017-10-12T09:56:58.388+02:00</creationDate>
  <lastEditor>Thijs Brentjens, Geonovum</lastEditor>
  <lastUpdateDate>2017-10-12T09:56:58.388+02:00</lastUpdateDate>
    <tags>
        <tag ref="EID732f7bd9-cb4e-4890-9e2a-7a542bf74f40"/>
    </tags>
<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
<!-- <translationTemplateBundle ref="EIDec27f542-af22-11e7-d284-09173f13e4c5"/> -->
<translationTemplateBundle ref="EID245c67e5-6d28-493e-9dc6-a23de3d81cc1"/>
  <ParameterList name="ETF Standard Parameters for XML test objects">
    <parameter name="files_to_test" required="true">
      <defaultValue>.*</defaultValue><description ref="TR.filesToTest"/>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
    <parameter name="tests_to_execute" required="false">
      <defaultValue>.*</defaultValue><description ref="TR.testsToExecute"/>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
  </ParameterList>
  <supportedTestObjectTypes><testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/></supportedTestObjectTypes>
<testModules>
  <TestModule id="EIDc9168a2b-b578-11e7-d2e7-09173f13e4c5">
    <label>Schematron pattern 1</label>
    <description>...</description><parent ref="EIDc9168a12-b578-11e7-d211-09173f13e4c5"/>
    <testCases>
      <TestCase id="EIDc9168a2d-b578-11e7-d2e9-09173f13e4c5">
        <label>Metadata</label>
        <description>...</description><parent ref="EIDc9168a2b-b578-11e7-d2e7-09173f13e4c5"/>
        <testSteps>
          <TestStep id="EIDc9168a16-b578-11e7-d613-09173f13e4c5">
            <label>IGNORE</label>
            <description>IGNORE</description><parent ref="EIDc9168a2d-b578-11e7-d2e9-09173f13e4c5"/>
            <statementForExecution>not applicable</statementForExecution><testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
            <testAssertions>
<TestAssertion id="EIDc9168ae5-b578-11e7-d2e1-09173f13e4c5"><label>metaDataProperty</label><description>This profile prohibits use of gml:metaDataProperty elements for referencing metadata in instance documents.</description><parent ref="EIDc9168a16-b578-11e7-d613-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*/*/*[not( string-length(not(gml:metaDataProperty)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.1.1', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion></testAssertions></TestStep></testSteps></TestCase><TestCase id="EIDc9168ae9-b578-11e7-d2e1-09173f13e4c5"><label>Data</label><description>...</description><parent ref="EIDc9168a2b-b578-11e7-d2e7-09173f13e4c5"/><testSteps><TestStep id="EIDc9168a17-b578-11e7-d724-09173f13e4c5"><label>IGNORE</label><description>IGNORE</description><parent ref="EIDc9168ae9-b578-11e7-d2e1-09173f13e4c5"/><statementForExecution>not applicable</statementForExecution><testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/><testAssertions><TestAssertion id="EIDc9168aed-b578-11e7-d2e2-09173f13e4c5"><label>Spatial_topology_types</label><description>Spatial properties are limited to the set of geometric types consisting of point, curve with linear and/or circular arc interpolation, planar surface, or aggregates thereof. Spatial topology is excluded.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:Node|self::gml:Edge|self::gml:Face|self::gml:TopoSolid|self::gml:TopoPoint|self::gml:TopoCurve|self::gml:TopoSurface|self::gml:TopoVolume|self::gml:TopoComplex)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.1', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168af2-b578-11e7-d2e2-09173f13e4c5"><label>Curves</label><description>Curves (standalone or within surfaces) must have linear and/or circular arc interpolation (LineString, Curve with Arc, Circle or CircleByCenterpoint segments)</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:Curve) or self::gml:Curve/gml:segments[gml:LineStringSegment|gml:Arc|gml:Circle|gml:CircleByCenterPoint]) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.2', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168af8-b578-11e7-d2e3-09173f13e4c5"><label>Planar_surfaces</label><description>Planar surface types are restricted to Polygon or Surface elements.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:OrientableSurface|self::gml:CompositeSurface|self::gml:PolyhedralSurface|self::gml:Tin|self::gml:TriangulatedSurface)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.3', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168afd-b578-11e7-d2e3-09173f13e4c5"><label>Geometry_types</label><description>Supported geometry types are restricted to point, curve with linear and/or circular arc interpolation, planar surface, or aggregates thereof.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:Solid|self::gml:MultiSolid|self::gml:CompositeSolid|self::gml:CompositeCurve|self::gml:Grid)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.4', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b02-b578-11e7-d2e4-09173f13e4c5"><label>Points</label><description>Geometry coordinates shall only be specified using the gml:pos element for gml:Point.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(count(self::gml:Point/gml:pos) = count(self::gml:Point/*)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.5', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b05-b578-11e7-d2e4-09173f13e4c5"><label>CircleByCenterPoint</label><description>Geometry coordinates shall only be specified using the gml:pos element for gml:CircleByCenterPoint.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(count(self::gml:CircleByCenterPoint/gml:pos|self::gml:CircleByCenterPoint/gml:radius) = count(self::gml:CircleByCenterPoint/*)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.6', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b0b-b578-11e7-d2e5-09173f13e4c5"><label>LineStrings</label><description>Geometry coordinates shall only be specified using the gml:posList element for gml:LineStringSegment.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(count(self::gml:LineStringSegment/gml:posList) =                 count(self::gml:LineStringSegment/*)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.7', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b0e-b578-11e7-d2e5-09173f13e4c5"><label>LinearRing</label><description>Geometry coordinates shall only be specified using the gml:posList element for gml:LinearRing.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(count(self::gml:LinearRing/gml:posList) =                 count(self::gml:LinearRing/*)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.8', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b11-b578-11e7-d2e5-09173f13e4c5"><label>Arc (GML)</label><description>Geometry coordinates shall only be specified using the gml:posList element for gml:Arc.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(count(self::gml:Arc/gml:posList) = count(self::gml:Arc/*)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.9', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b14-b578-11e7-d2e6-09173f13e4c5"><label>Circle</label><description>Geometry coordinates shall only be specified using the gml:posList element for gml:Circle.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(count(self::gml:Circle/gml:posList) =                 count(self::gml:Circle/*)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.10', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b19-b578-11e7-d2e6-09173f13e4c5"><label>MultiPoint</label><description>This profile restricts instance documents to using the property container gml:pointMember for the MultiPoint geometry type.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:MultiPoint/gml:pointMembers)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.11', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b1d-b578-11e7-d2e6-09173f13e4c5"><label>MulitCurve</label><description>This profile restricts instance documents to using the property container gml:curveMember for the MultiCurve geometry type.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:MultiCurve/gml:curveMembers)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.12', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b20-b578-11e7-d2e7-09173f13e4c5"><label>MultiSurface</label><description>This profile restricts instance documents to using the property container gml:surfaceMember for the MultiSurface geometry type.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:MultiSurface/gml:surfaceMembers)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.13', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b23-b578-11e7-d2e7-09173f13e4c5"><label>MultiGeometry</label><description>This profile restricts instance documents to using the property container gml:geometryMember for the MultiGeometry geometry type.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::gml:MultiGeometry/gml:geometryMembers)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.14', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b28-b578-11e7-d2e8-09173f13e4c5"><label>Surface</label><description>The content of gml:Surface elements is restricted to gml:PolygonPatch patches.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(count(self::gml:Surface/gml:patches/gml:PolygonPatch) =                 count(self::gml:Surface/gml:patches/*)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.15', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion><TestAssertion id="EIDc9168b2b-b578-11e7-d2e8-09173f13e4c5"><label>Dimension</label><description>Coordinate reference systems may have 1, 2 or 3 dimensions.</description><parent ref="EIDc9168a17-b578-11e7-d724-09173f13e4c5"/><expectedResult>NOT_APPLICABLE</expectedResult><expression>

                                                            let $filesWithErrors := $db[/*//*[not( string-length(not(self::*/@srsDimension &gt; 3)) &gt; 0)]]
                                                            return
                                                            (if ($filesWithErrors) then 'FAILED' else 'PASSED',
                                                            local:error-statistics('TR.filesWithErrors', count($filesWithErrors)),
                                                            for $file in $filesWithErrors
                                                            order by local:filename($file)
                                                            let $root := $file/element()
                                                            return
                                                            local:addMessage('TR.schtron.Schematron.schematron.err.1.2.16', map { 'filename': local:filename($root)  }))
                                                        </expression><testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/></TestAssertion>
</testAssertions>
</TestStep>
</testSteps>
</TestCase>
</testCases>
</TestModule>
</testModules>
</etf:ExecutableTestSuite>
