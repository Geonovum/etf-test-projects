<?xml version="1.0" encoding="UTF-8"?>
<etf:ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xmlns:etf="http://www.interactive-instruments.de/etf/2.0"
                         xmlns:ii="http://www.interactive-instruments.de"
                         id="EID59f688c3-e65e-11e7-1863-09173f13e4c5"
                         xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 http://resources.etf-validator.net/schema/v2/service/service.xsd">
   <itemHash>bQ==</itemHash>
   <remoteResource>https://github.com/interactive-instruments/etf-ets-repository</remoteResource>
   <localPath>/auto</localPath>
   <label>Schema tests</label>
   <description>...</description>
   <reference>../example-bsxets.xq</reference>
   <version>2.0.0</version>
   <author>interactive instruments GmbH</author>
   <creationDate>2015-08-18T12:00:00.000+02:00</creationDate>
   <lastEditor>Transformer for XSD tests BSX</lastEditor>
   <lastUpdateDate>2017-12-21T15:50:56.873+01:00</lastUpdateDate>
   <tags>
      <tag ref="EIDf969a29a-0c58-4738-af67-2e17e894ef4d"/>
   </tags>
   <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
   <translationTemplateBundle ref="EIDabe7742e-9ef5-4700-ad3b-dd532a4cf0a9"/>
   <ParameterList name="ETF Standard Parameters for XML test objects">
      <parameter name="files_to_test" required="true">
         <defaultValue>.*</defaultValue>
         <description ref="TR.filesToTest"/>
         <allowedValues>.*</allowedValues>
         <type>string</type>
      </parameter>
      <parameter name="tests_to_execute" required="false">
         <defaultValue>.*</defaultValue>
         <description ref="TR.testsToExecute"/>
         <allowedValues>.*</allowedValues>
         <type>string</type>
      </parameter>
   </ParameterList>
   <supportedTestObjectTypes>
      <testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
   </supportedTestObjectTypes>
   <testModules>
      <TestModule id="EID59f68ddf-e65e-11e7-3995-09173f13e4c5">
         <label>xsd validation</label>
         <description>xsd validation</description>
         <parent ref="EID59f688c3-e65e-11e7-1863-09173f13e4c5"/>
         <testCases>
            <TestCase id="EID59f68732-e65e-11e7-2024-09173f13e4c5">
               <label>Schema validation</label>
               <description>...</description>
               <parent ref="EID59f68ddf-e65e-11e7-3995-09173f13e4c5"/>
               <testSteps>
                  <TestStep id="EID59f686c9-e65e-11e7-9635-09173f13e4c5">
                     <label>IGNORE</label>
                     <description>IGNORE</description>
                     <parent ref="EID59f68ddf-e65e-11e7-3995-09173f13e4c5"/>
                     <statementForExecution>not applicable</statementForExecution>
                     <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
                     <testAssertions>
                        <TestAssertion id="EID59f69fc0-e65e-11e7-3151-09173f13e4c5">
                           <label>XML Schema validation</label>
                           <description/>
                           <parent ref="EID59f686c9-e65e-11e7-9635-09173f13e4c5"/>
                           <expectedResult>NOT_APPLICABLE</expectedResult>
                           <expression>
                                        let $allErrors := (
                                            for $file in $db
                                            return
                                                let $start := prof:current-ms()
                                                let $infos := validate:xsd-info($file, 'http://schemas.opengis.net/iso/19139/20060504/gmd/gmd.xsd' )
                                                let $duration := prof:current-ms()-$start
                                                let $logentry := local:log('Validating file ' || local:filename($file) || ': ' || $duration || ' ms')
                                                let $errors := count($infos)
                                                return
                                                if ($errors &gt; 0) then
                                                    (local:addMessage('TR.invalidSchema', map { 'filename': local:filename($file), 'count': string($errors) }),
                                                    for $info in $infos return local:addMessage('TR.xmlSchemaError', map { 'filename': local:filename($file), 'error': $info }))
                                                else ()
                                        )
                                        return
                                        (if ($allErrors) then 'FAILED' else 'PASSED',
                                        local:error-statistics('TR.filesWithErrors', count($allErrors[@ref eq 'TR.invalidSchema'])),
                                        $allErrors[position() le $limitErrors])
                                    </expression>
                           <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                           <translationTemplates>
                              <translationTemplate ref="TR.xmlSchemaError"/>
                              <translationTemplate ref="TR.invalidSchema"/>
                              <translationTemplate ref="TR.filesWithErrors"/>
                              <translationTemplate ref="TR.xmlSchemaErrorRecord"/>
                              <translationTemplate ref="TR.invalidSchemaRecord"/>
                           </translationTemplates>
                        </TestAssertion>
                     </testAssertions>
                  </TestStep>
               </testSteps>
            </TestCase>
         </testCases>
      </TestModule>
   </testModules>
</etf:ExecutableTestSuite>