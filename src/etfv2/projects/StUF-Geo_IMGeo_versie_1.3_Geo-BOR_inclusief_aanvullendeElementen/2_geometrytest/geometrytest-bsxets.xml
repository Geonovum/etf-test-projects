<?xml version="1.0" encoding="UTF-8"?>
<etf:ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xmlns:etf="http://www.interactive-instruments.de/etf/2.0"
                         xmlns:ii="http://www.interactive-instruments.de"
                         id="EIDd0035192-25ef-11e8-d217-09173f13e4c5"
                         xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 http://resources.etf-validator.net/schema/v2/service/service.xsd">
   <itemHash>bQ==</itemHash>
   <remoteResource>https://github.com/interactive-instruments/etf-ets-repository/example/geometrytest</remoteResource>
   <localPath>/auto</localPath>
   <label>Geometry tests</label>
   <description>...</description>
   <reference>../example-bsxets.xq</reference>
   <version>2.0.0</version>
   <author>interactive instruments GmbH, Geonovum</author>
   <creationDate>2015-08-18T12:00:00.000+02:00</creationDate>
   <lastEditor>Transformer for geometry tests BSX</lastEditor>
   <lastUpdateDate>2018-03-12T13:20:55.209+01:00</lastUpdateDate>
   <tags>
      <tag ref="EID1f3b85ac-1e82-4ec1-af30-75f340037dab"/>
   </tags>
   <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
   <translationTemplateBundle ref="EID245c67e5-6d28-493e-9dc6-a23de3d81cc0"/>
   <ParameterList name="ETF Standard Parameters for XML test objects">
      <parameter name="files_to_test" required="true">
         <defaultValue>.*</defaultValue>
         <description ref="TR.filesToTest"/>
         <allowedValues>.*</allowedValues>
         <type>string</type>
      </parameter>
      <parameter name="tests_to_execute" required="false">
         <defaultValue>.*</defaultValue>
         <description ref="TR.testsToExecute"/>
         <allowedValues>.*</allowedValues>
         <type>string</type>
      </parameter>
   </ParameterList>
   <supportedTestObjectTypes>
      <!-- <testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/> -->
      <testObjectType ref="EID810fce18-4bf5-4c6c-a972-6962bbe3b76b"/>
   </supportedTestObjectTypes>
   <testModules>
      <TestModule id="EIDd00361df-25ef-11e8-3995-09173f13e4c5">
         <label>IGNORE</label>
         <description>IGNORE</description>
         <parent ref="EIDd0035192-25ef-11e8-d217-09173f13e4c5"/>
         <testCases>
            <TestCase id="EIDd0035b32-25ef-11e8-2024-09173f13e4c5">
               <label>Geometry tests</label>
               <description>...</description>
               <parent ref="EIDd00361df-25ef-11e8-3995-09173f13e4c5"/>
               <testSteps>
                  <TestStep id="EIDd0035ac9-25ef-11e8-9635-09173f13e4c5">
                     <label>IGNORE</label>
                     <description>IGNORE</description>
                     <parent ref="EIDd00361df-25ef-11e8-3995-09173f13e4c5"/>
                     <statementForExecution>not applicable</statementForExecution>
                     <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
                     <testAssertions>
                        <TestAssertion id="EIDd00373c0-25ef-11e8-3151-09173f13e4c5">
                           <label>Check CRS</label>
                           <description>...</description>
                           <parent ref="EIDd0035ac9-25ef-11e8-9635-09173f13e4c5"/>
                           <expectedResult>NOT_APPLICABLE</expectedResult>
                           <expression>
										let $featuresWithErrors := $features[//@srsName[.!='http://www.opengis.net/def/crs/EPSG/0/28992' and .!='EPSG:28992' and .!='urn:ogc:def:crs:EPSG::28992']][position() le $limitErrors]
										return
										(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
										local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
										for $feature in $featuresWithErrors
										order by $feature/@gml:id
										return local:addMessage('TR.example.crsNot28992', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'crs': data(($feature//@srsName[.!='http://www.opengis.net/def/crs/EPSG/0/28992' and .!='EPSG:28992' and .!='urn:ogc:def:crs:EPSG::28992'])[1])  }))
</expression>
                           <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                        </TestAssertion>
                        <TestAssertion id="EIDd0035a9d-25ef-11e8-9113-09173f13e4c5">
                           <label>Valid GML geometry (2D) all at once</label>
                           <description>Test geometry on being valid GML geometry for 2D, all tests at once</description>
                           <parent ref="EIDd0035ac9-25ef-11e8-9635-09173f13e4c5"/>
                           <expectedResult>NOT_APPLICABLE</expectedResult>
                           <expression>
										let $messages := for $feature in $features
										return
										try {
										let $vr := ggeo:validateAndReport($feature,'111')
										return
										if (xs:boolean($vr/ggeo:isValid)) then ()
										else
										for $message in $vr/ggeo:message[@type='ERROR']
										return
										local:addMessage('TR.invalidGeometry', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'text': $message/text() })
										} catch * {
										}
										return
										(if ($messages) then 'FAILED' else 'PASSED',
										local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messages//etf:argument[@token='gmlid']/text()))),
										$messages)
</expression>
                           <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                        </TestAssertion>
                        <TestAssertion id="EIDd0036391-25ef-11e8-1337-09173f13e4c5">
                           <label>Valid GML geometry (2D) General Validation</label>
                           <description>Test geometry on being valid GML geometry for 2D - General Validation</description>
                           <parent ref="EIDd0035ac9-25ef-11e8-9635-09173f13e4c5"/>
                           <expectedResult>NOT_APPLICABLE</expectedResult>
                           <expression>
										let $messages := for $feature in $features
										return
										try {
										let $vr := ggeo:validateAndReport($feature,'1')
										return
										if (xs:boolean($vr/ggeo:isValid)) then ()
										else
										for $message in $vr/ggeo:message[@type='ERROR']
										return
										local:addMessage('TR.invalidGeometry', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'text': $message/text() })
										} catch * {
										}
										return
										(if ($messages) then 'FAILED' else 'PASSED',
										local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messages//etf:argument[@token='gmlid']/text()))),
										$messages)
</expression>
                           <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                        </TestAssertion>
                        <TestAssertion id="EIDd00358c3-25ef-11e8-2015-09173f13e4c5">
                           <label>Valid GML geometry (2D) Polygon Patch Connectivity</label>
                           <description>Test geometry on being valid GML geometry for 2D - Polygon Patch Connectivity</description>
                           <parent ref="EIDd0035ac9-25ef-11e8-9635-09173f13e4c5"/>
                           <expectedResult>NOT_APPLICABLE</expectedResult>
                           <expression>
										let $messages := for $feature in $features
										return
										try {
										let $vr := ggeo:validateAndReport($feature,'01')
										return
										if (xs:boolean($vr/ggeo:isValid)) then ()
										else
										for $message in $vr/ggeo:message[@type='ERROR']
										return
										local:addMessage('TR.invalidGeometry', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'text': $message/text() })
										} catch * {
										}
										return
										(if ($messages) then 'FAILED' else 'PASSED',
										local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messages//etf:argument[@token='gmlid']/text()))),
										$messages)
</expression>
                           <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                        </TestAssertion>
                        <TestAssertion id="EIDd0035e77-25ef-11e8-1682-09173f13e4c5">
                           <label>Valid GML geometry (2D) Repetition of Position in CurveSegments</label>
                           <description>Test geometry on being valid GML geometry for 2D - Repetition of Position in CurveSegments</description>
                           <parent ref="EIDd0035ac9-25ef-11e8-9635-09173f13e4c5"/>
                           <expectedResult>NOT_APPLICABLE</expectedResult>
                           <expression>
										let $messages := for $feature in $features
										return
										try {
										let $vr := ggeo:validateAndReport($feature,'001')
										return
										if (xs:boolean($vr/ggeo:isValid)) then ()
										else
										for $message in $vr/ggeo:message[@type='ERROR']
										return
										local:addMessage('TR.invalidGeometry', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'text': $message/text() })
										} catch * {
										}
										return
										(if ($messages) then 'FAILED' else 'PASSED',
										local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messages//etf:argument[@token='gmlid']/text()))),
										$messages)
</expression>
                           <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                        </TestAssertion>
                     </testAssertions>
                  </TestStep>
               </testSteps>
            </TestCase>
         </testCases>
      </TestModule>
   </testModules>
</etf:ExecutableTestSuite>
